
/* Configuration to supply to the Jini ServiceStarter.
 * This file provides information the ServiceStarter
 * needs to start any of the Bigdata services, as
 * well as the Jini lookup service and browser.
 */
import org.embergraph.util.config.ConfigurationUtil;
import org.embergraph.util.config.NicUtil;

import com.sun.jini.config.ConfigUtil;
import com.sun.jini.start.NonActivatableServiceDescriptor;
import com.sun.jini.start.ServiceDescriptor;
import net.jini.core.discovery.LookupLocator;

com.sun.jini.start {

    private static codebaseHost = 
        NicUtil.getIpAddress("bigdata.codebase.host", "default", false);
    private static codebasePort = 
        Integer.parseInt( System.getProperty("bigdata.codebase.port", "0") );
    private static codebaseRootDir = 
        System.getProperty("bigdata.codebase.rootdDir", "." );

    private static jskCodebase = 
        ConfigurationUtil.computeCodebase
            ( codebaseHost, "jsk-dl.jar",
              codebasePort, codebaseRootDir, "none" );

    private static servicePolicyFile =
        "${appHome}${/}var${/}config${/}policy${/}service.policy";

    // For starting HTTP codebase class server
    private static httpdCodebase   = "";
    private static httpdPolicyFile = servicePolicyFile;
    private static httpdClasspath  = "${appHome}${/}lib${/}classserver.jar";
    private static httpdImplName   = "com.sun.jini.tool.ClassServer";
    private static httpdArgsArray  = new String[] {
        "-port", "${bigdata.codebase.port}",
        "-dir",  "${bigdata.codebase.rootDir}",
        //"-verbose",
        "-stoppable"
    };

    private static httpdDescriptor = new NonActivatableServiceDescriptor(
        httpdCodebase, httpdPolicyFile, httpdClasspath,
        httpdImplName, httpdArgsArray);

    // It is expected that all service-specific code will be
    // included in the classpath of the services being started
    // (for example, bigdata.jar and zookeeper.jar), as part of 
    // the service platform, rather than being downloaded. Instead,
    // because bigdata is run with a class server serving the
    // downloadable jini classes, the service codebases set below
    // are defined to include only the jini-specific downloaded
    // classes.

    // For starting a zookeeper server (from the zookeeper codebase)

    private static zookeeperCodebase = jskCodebase;

    private static zookeeperClasspath = "${appHome}${/}lib${/}zookeeper.jar";
    private static zookeeperImplName  = "org.apache.zookeeper.server.quorum.QuorumPeerImpl";
    private static zookeeperConfig    = "${appHome}${/}bin${/}config${/}zookeeper.config";

    private static zookeeperArgs0 =
        "org.apache.zookeeper.server.quorum.groupsToJoin=new String[]${groupsToJoin}";
    private static zookeeperArgs1 =
        "org.apache.zookeeper.server.quorum.locatorsToJoin=new LookupLocator[]${locsToJoin}";
    private static zookeeperArgsArray = 
        ConfigurationUtil.createArgList( new String[] { zookeeperConfig, zookeeperArgs0, zookeeperArgs1 },
                                          "${entityExtraArgs}");

    private static zookeeperDescriptor = new NonActivatableServiceDescriptor(
        zookeeperCodebase, servicePolicyFile, zookeeperClasspath,
        zookeeperImplName, zookeeperArgsArray);


    // For starting a lookup service
    private static reggieServerCodebase = 
        ConfigurationUtil.computeCodebase
            ( codebaseHost, "reggie-dl.jar",
              codebasePort, codebaseRootDir, "none" );
    private static reggieCodebase = 
        ConfigUtil.concat( new String[] { reggieServerCodebase, " ", jskCodebase } );

    private static reggieClasspath = "${appHome}${/}lib${/}reggie.jar";
    private static reggieImplName  = "com.sun.jini.reggie.TransientRegistrarImpl";
    private static reggieConfig    = "${appHome}${/}bin${/}config${/}${/}reggie.config";

    private static reggieArgs0 =
        "com.sun.jini.reggie.initialLookupGroups=new String[]${groupsToJoin}";
    private static reggieArgs1 =
        "com.sun.jini.reggie.initialLookupLocators=new LookupLocator[]${locsToJoin}";
    private static reggieArgs2 =
        "com.sun.jini.reggie.initialMemberGroups=new String[]${memberGroups}";
    private static reggieArgsArray = 
        ConfigurationUtil.createArgList( new String[] { reggieConfig, reggieArgs0, reggieArgs1, reggieArgs2 },
                                          "${entityExtraArgs}");

    private static reggieDescriptor = new NonActivatableServiceDescriptor(
        reggieCodebase, servicePolicyFile, reggieClasspath,
        reggieImplName, reggieArgsArray);


    // For starting a Jini browser
    private static browserServerCodebase =
        ConfigurationUtil.computeCodebase
            ( codebaseHost, "browser-dl.jar",
              codebasePort, codebaseRootDir, "none" );
    private static browserCodebase = 
        ConfigUtil.concat( new String[] { browserServerCodebase, " ", jskCodebase } );

    private static browserClasspath = 
        "${appHome}${/}lib${/}browser.jar${path.separator}${appHome}${/}lib${/}jsk-lib.jar${path.separator}${appHome}${/}lib${/}log4j.jar${path.separator}${appHome}${/}lib${/}bigdata.jar${path.separator}${appHome}${/}lib${/}zookeeper.jar";
    private static browserImplName = "com.sun.jini.example.browser.Browser";
    private static browserConfig   = "${appHome}${/}bin${/}config${/}browser.config";

    private static browserArgs0 =
        "com.sun.jini.example.browser.initialLookupGroups=new String[]${groupsToJoin}";
    private static browserArgs1 =
        "com.sun.jini.example.browser.initialLookupLocators=new LookupLocator[]${locsToJoin}";
    private static browserArgsArray = 
        ConfigurationUtil.createArgList( new String[] { browserConfig, browserArgs0, browserArgs1 },
                                          "${entityExtraArgs}");

    private static browserDescriptor = 
        new NonActivatableServiceDescriptor( browserCodebase, servicePolicyFile,
                                             browserClasspath, browserImplName,
                                             browserArgsArray);

    // Scripts (ex. pstart) can override this entry 
    serviceDescriptors = new ServiceDescriptor[] {
        //httpdDescriptor,
        //reggieDescriptor,
        //browserDescriptor
    };

}