# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# Vagraant.aws.ha3 - Install the Bigdata High Availability Server with 3 Nodes with an AWS Provider
#
# This vagrant file is meant to be launched by the bin/createCluster.sh script.
#
# The launch synopsis for this Vagrantfile:
#
#   % bin/createCluster.sh
#
ENV['VAGRANT_DEFAULT_PROVIDER'] = 'aws'

Vagrant.require_plugin "vagrant-berkshelf"

Vagrant.configure("2") do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

config.vm.define :embergraphA do |embergraphA|
  embergraphA.vm.box = "dummy"
  embergraphA.vm.hostname = ENV['BIGDATA_HA_HOST_A']

  embergraphA.berkshelf.enabled = true

  embergraphA.vm.provider :aws do |aws, override|
    aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
    aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
    aws.keypair_name = ENV['AWS_KEYPAIR_NAME']

    aws.ami = ENV['AWS_AMI']

    aws.block_device_mapping = [
        {
            :DeviceName => "/dev/sdb", 
            :VirtualName => "ephemeral0"
        },
        {
            :DeviceName => "/dev/sdc", 
            :VirtualName => "ephemeral1"
        }
    ]
    
    aws.region = ENV['AWS_REGION']
    aws.instance_type = ENV['AWS_INSTANCE_TYPE']
    aws.security_groups = [ ENV['AWS_SECURITY_GROUPS'], ENV['AWS_SECURITY_GROUP_PRIVATE'] ]

    aws.tags = {
      'Name' => ENV['BIGDATA_HA_HOST_A']
    }

    override.ssh.username = ENV['AWS_AMI_USERNAME']
    override.ssh.private_key_path = ENV['AWS_SSH_PRIVATE_KEY']
  end

  embergraphA.vm.provision :chef_solo do |chef|
    chef.json = {
	:embergraph => {
		:install_flavor => "ha"
	},
	:java => {
		:install_flavor => "oracle",
		:jdk_version => "7",
		:oracle => { 'accept_oracle_download_terms' => true }
	},
	:zookeeper =>	{
		:zoocfg => { :clientPort=> '2081' }
	}
    }

    embergraphA.vm.provision :shell, inline: "sudo apt-get update ; sudo curl -L https://www.opscode.com/chef/install.sh | sudo bash"

    chef.run_list = [
        "recipe[embergraph::ssd]",
        "recipe[embergraph::high_availability]"
    ]

  end

end # embergraphA


config.vm.define :embergraphB do |embergraphB|
  embergraphB.vm.box = "dummy"
  embergraphB.vm.hostname = ENV['BIGDATA_HA_HOST_B']

  embergraphB.berkshelf.enabled = true

  embergraphB.vm.provider :aws do |aws, override|
    aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
    aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
    aws.keypair_name = ENV['AWS_KEYPAIR_NAME']

    aws.ami = ENV['AWS_AMI']

    aws.block_device_mapping = [
        {
            :DeviceName => "/dev/sdb", 
            :VirtualName => "ephemeral0"
        },
        {
            :DeviceName => "/dev/sdc", 
            :VirtualName => "ephemeral1"
        }
    ]
    
    aws.region = ENV['AWS_REGION']
    aws.instance_type = ENV['AWS_INSTANCE_TYPE']
    aws.security_groups = [ ENV['AWS_SECURITY_GROUPS'], ENV['AWS_SECURITY_GROUP_PRIVATE'] ]

    aws.tags = {
      'Name' => ENV['BIGDATA_HA_HOST_B']
    }

    override.ssh.username = ENV['AWS_AMI_USERNAME']
    override.ssh.private_key_path = ENV['AWS_SSH_PRIVATE_KEY']
  end

  embergraphB.vm.provision :chef_solo do |chef|
    chef.json = {
	:embergraph => {
		:install_flavor => "ha"
	},
	:java => {
		:install_flavor => "oracle",
		:jdk_version => "7",
		:oracle => { 'accept_oracle_download_terms' => true }
	},
	:zookeeper =>	{
		:zoocfg => { :clientPort=> '2081' }
	}
    }

    embergraphB.vm.provision :shell, inline: "sudo apt-get update ; sudo curl -L https://www.opscode.com/chef/install.sh | sudo bash"

    chef.run_list = [
        "recipe[embergraph::ssd]",
        "recipe[embergraph::high_availability]"
    ]

  end

end # embergraphB


config.vm.define :embergraphC do |embergraphC|
  embergraphC.vm.box = "dummy"
  embergraphC.vm.hostname = ENV['BIGDATA_HA_HOST_C']

  embergraphC.berkshelf.enabled = true

  embergraphC.vm.provider :aws do |aws, override|
    aws.access_key_id = ENV['AWS_ACCESS_KEY_ID']
    aws.secret_access_key = ENV['AWS_SECRET_ACCESS_KEY']
    aws.keypair_name = ENV['AWS_KEYPAIR_NAME']

    aws.ami = ENV['AWS_AMI']

    aws.block_device_mapping = [
        {
            :DeviceName => "/dev/sdb", 
            :VirtualName => "ephemeral0"
        },
        {
            :DeviceName => "/dev/sdc", 
            :VirtualName => "ephemeral1"
        }
    ]
    
    aws.region = ENV['AWS_REGION']
    aws.instance_type = ENV['AWS_INSTANCE_TYPE']
    aws.security_groups = [ ENV['AWS_SECURITY_GROUPS'], ENV['AWS_SECURITY_GROUP_PRIVATE'] ]

    aws.tags = {
      'Name' => ENV['BIGDATA_HA_HOST_C']
    }

    override.ssh.username = ENV['AWS_AMI_USERNAME']
    override.ssh.private_key_path = ENV['AWS_SSH_PRIVATE_KEY']
  end

  embergraphC.vm.provision :chef_solo do |chef|
    chef.json = {
	:embergraph => {
		:install_flavor => "ha"
	},
	:java => {
		:install_flavor => "oracle",
		:jdk_version => "7",
		:oracle => { 'accept_oracle_download_terms' => true }
	},
	:zookeeper =>	{
		:zoocfg => { :clientPort=> '2081' }
	}
    }

    embergraphC.vm.provision :shell, inline: "sudo apt-get update ; sudo curl -L https://www.opscode.com/chef/install.sh | sudo bash"

    chef.run_list = [
        "recipe[embergraph::ssd]",
        "recipe[embergraph::high_availability]"
    ]

  end

end # embergraphC

end
