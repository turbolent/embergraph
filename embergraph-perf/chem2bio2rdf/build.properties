# ant build properties.

# the base directory
perf.dir=.
# The base directory for chem2bio2rdf data and jouranls.
perf.baseDir=/Users/mikepersonick/Documents/nobackup/chem2bio2rdf
# The data directory for chem2bio2rdf
perf.dataDir=${perf.baseDir}/data


# the bigdata base directory
bigdata.dir=../..
# Where to find the pre-build bigdata classes.
bigdata.build.dir=${bigdata.dir}/ant-build
# Where to find the bigdata libraries.
bigdata.install.lib.dir=${bigdata.dir}/

##
# javac options
##

# debug=on|off
javac.debug=off
# debuglevel=lines,vars,source (or any combination thereof).
javac.debuglevel=lines,vars,source
javac.verbose=off
#javac.target=1.6
#javac.source=1.6
javac.encoding=Cp1252

# perf properties.
#
# Note: By default, the files will wind up in ./ant-build/bin
#
# Note: By degault, the server jvm will optimize for throughput and can have
# high variation in throughput due to long GC pauses for larger heaps. You can
# use the CMS-I GC mode to minimize latency at the expense of some throughput.

# The port at which the NanoSparqlServer will respond (if started).
perf.nanoServerPort=9999

# The maximum size of the java heap for the BSBM test runs.
perf.maxMem=2g

# The namespace of the KB instance (multiple KBs can be in the same database).
perf.namespace=chem2bio2rdf

# Chembl dataset
perf.dataset=${perf.dataDir}/chembl.n3
perf.defaultGraph=file:///home/OPS/develop/openphacts/datasets/chem2bio2rdf/chembl.nt

# Drugbank dataset
#perf.dataset=${perf.dataDir}/drugbank_dump.nt
#perf.defaultGraph=http://linkedlifedata.com/resource/drugbank

# Chembl + drugbank
#perf.dataset=${perf.dataDir}/chembl.n3 ${perf.dataDir}/drugbank.n3

# Specify ".gz" or ".zip" if pre-generated files have been compressed.
perf.compressType=
#perf.compressType=".gz"

# Which mode to use for the Journal. (DiskRW or DiskWORM)
journalMode=RW
#journalMode=WORM

# The name of the file used to configure the BSBM journal.
perf.journalPropertyFile=${journalMode}Store.properties

# The name of the file used for the journal.
perf.journalFile=${perf.baseDir}/bigdata.${journalMode}.jnl

#
# Profiler parameters.
#

# No profiler.
profilerAgent=
# linux-64
#profilerAgent=-agentpath:/usr/java/yjp-9.0.3/bin/linux-x86-64/libyjpagent.so
# Windows
#profilerAgent="-agentpath:C:/Program Files/YourKit Java Profiler 9.0.2/bin/win32/yjpagent.dll"
# Windows Server 2008
#profilerAgent="-agentpath:C:/Program Files (x86)/YourKit Java Profiler 9.0.4/bin/win64/yjpagent.dll"

# No profiler.
profilerAgentOptions=
# all profiling initially disabled.
#profilerAgentOptions=-agentlib:yjpagent=disableexceptiontelemetry,disablestacktelemetry

profiler=${profilerAgent} ${profilerAgentOptions}

# Configure GC.
#gcopts=
#gcopts=-verbose:gc
#gcopts=-XX:+UseConcMarkSweepGC -XX:+CMSIncrementalMode
gcopts=-XX:+UseParallelOldGC
#gcopts=-XX:+UnlockExperimentalVMOptions -XX:+UseG1GC

# Generates detailed logging on the JVM GC behavior.  The service will
# start in the configured service directory, so the log file will be in
# that directory as well.  The service directory is typically on local
# disk, so that is where you need to look for this file.
gcdebug=
#gcdebug=-XX:+PrintGCDetails -XX:+PrintGCTimeStamps -Xloggc:jvm_gc.log

# The record cache (empty for the default cache).
cache=
#cache=-Dcom.bigdata.LRUNexus.enabled=false
#cache=-Dcom.bigdata.LRUNexus.class=com.bigdata.cache.BCHMGlobalLRU2 -Dcom.bigdata.LRUNexus.threadLocalBuffers=true
#cache=-Dcom.bigdata.LRUNexus.class=com.bigdata.cache.BCHMGlobalLRU -Dcom.bigdata.LRUNexus.accessPolicy=LIRS -Dcom.bigdata.LRUNexus.limitingCapacity=2000000
#-Dcom.bigdata.LRUNexus.class=com.bigdata.cache.StoreAndAddressLRUCache
#-Dcom.bigdata.LRUNexus.class=com.bigdata.cache.HardReferenceGlobalLRURecycler
#
##  -Dcom.bigdata.LRUNexus.percentHeap=.1

# all jvm args for query.
queryJvmArgs=-server -Xmx${perf.maxMem} -showversion ${gcopts} ${gcdebug} ${profiler} ${cache} -Dlog4j.configuration=file:log4j.properties
# -Dlog4j.debug
