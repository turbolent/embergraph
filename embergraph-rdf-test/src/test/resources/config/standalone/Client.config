import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

import net.jini.discovery.LookupDiscovery;
import net.jini.core.discovery.LookupLocator;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.Name;
import net.jini.lookup.entry.Comment;
import net.jini.lookup.entry.Address;
import net.jini.lookup.entry.Location;
import net.jini.lookup.entry.ServiceInfo;

import java.io.File;

import com.bigdata.util.NV;

/*
 * The service description for a simple client has less information.
 * This is because the client does not export any interfaces and does
 * not have a persistent serviceId.  Compare with DataServer0.config
 * for example.
 */
ServiceDescription {

	/*    
	 * The name of the optional property file containing the configuration information for
	 * the service itself (where it will locate its files, etc).  When present,
	 * this file will be read and [properties] may be used to override the value
	 * read from the [propertyFile].
	 */
    // propertyFile = new File("src/resources/config/standalone/Client.properties");

	/* 
	 * Optional inline properties for the client configuration.  Any values specified here
	 * will OVERRIDE any values read from the optional [propertyFile].
	 */
	properties = new NV[] {

	};

}

/*
 * Declares how the client will discover the Jini service registrar.
 * Once the client has access to the registrar it will resolve
 * services in the federation using the provided group(s).
 *
 * Each bigdata federation should use its own group for ease of
 * management and each client should limit its discovery to the group
 * corresponding to the federation(s) to which it will connect.
 *
 * Note: The client does not declare [entries] since it will not
 * advertise itself to the Jini service registrar.
 */
AdvertDescription {

	/*
	 * Note: multicast discovery is always used if LookupDiscovery.ALL_GROUPS is
	 * specified.
	 */
//    groups = LookupDiscovery.ALL_GROUPS;
    groups = new String[]{"bigdata"};

	/*
	 * One or more unicast URIs of the form jini://host/ or jini://host:port/.
	 * This MAY be an empty array if you want to use multicast discovery _and_
	 * you have specified LookupDiscovery.ALL_GROUPS above.
	 */
    unicastLocators = new LookupLocator[] { // empty
    	new LookupLocator("jini://localhost/")
   	};

}
