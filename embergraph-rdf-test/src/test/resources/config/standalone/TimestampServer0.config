import java.io.File;

import net.jini.jeri.BasicILFactory;
import net.jini.jeri.BasicJeriExporter;
import net.jini.jeri.tcp.TcpServerEndpoint;

import net.jini.discovery.LookupDiscovery;
import net.jini.core.discovery.LookupLocator;
import net.jini.core.entry.Entry;
import net.jini.lookup.entry.Name;
import net.jini.lookup.entry.Comment;
import net.jini.lookup.entry.Address;
import net.jini.lookup.entry.Location;
import net.jini.lookup.entry.ServiceInfo;

import com.bigdata.util.NV;

/*
 * Declares how the service will provision itself.
 */
ServiceDescription {

	/*
	 * This object is used to export the service proxy.  The choice here effects
	 * the protocol that will be used for communications between the clients and
	 * the service.
	 *
	 * @todo Explore JERI nio option and customization support for serialization.
	 */
    exporter = new BasicJeriExporter(TcpServerEndpoint.getInstance(0),
                                     new BasicILFactory()); 

	/*
	 * Service data directory.
	 */
	dataDir = "standalone/TimestampServer0";
       
	/*                                          
	 * The file on which the serviceID will be written.
	 */
    serviceIdFile = new File(dataDir+"/service.id"); 

	/*    
	 * The name of the optional property file containing the configuration information for
	 * the service itself (where it will locate its files, etc).
	 */
    //propertyFile = new File("src/resources/config/standalone/TimestampServer0.properties");

	/* 
	 * Optional inline properties for the service configuration.  Any values specified here
	 * will OVERRIDE any values read from the optional [propertyFile].
	 */
	// properties = new NV[] {};
}

/*
 * Declares how the service will advertise itself.
 */
AdvertDescription {

	/*
	 * Entry attributes used to describe the service.
	 */
    entries = new Entry[] {
                new Name("TimestampServer0"), // human facing name.
                new ServiceInfo("bigdata", // product or package name
                        "SYSTAP,LLC", // manufacturer
                        "SYSTAP,LLC", // vendor
                        "0.1-beta", // version
                        "TimestampServer", // model
                        "serial#" // serialNumber
                ) };

	/*
	 * Note: multicast discovery is always used if LookupDiscovery.ALL_GROUPS is
	 * specified.
	 */
//    groups = LookupDiscovery.ALL_GROUPS;
    groups = new String[]{"bigdata"};

	/*
	 * One or more unicast URIs of the form jini://host/ or jini://host:port/.
	 * This MAY be an empty array if you want to use multicast discovery _and_
	 * you have specified LookupDiscovery.ALL_GROUPS above.
	 */
    unicastLocators = new LookupLocator[] {
    	new LookupLocator("jini://localhost/")
	};    

}
