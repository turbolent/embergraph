/* Generated By:JJTree&JavaCC: Do not edit this line. SyntaxTreeBuilderConstants.java */
package com.bigdata.rdf.sail.sparql.ast;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SyntaxTreeBuilderConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WS_CHAR = 1;
  /** RegularExpression Id. */
  int WHITESPACE = 2;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 3;
  /** RegularExpression Id. */
  int NEW_LINE = 4;
  /** RegularExpression Id. */
  int LPAREN = 5;
  /** RegularExpression Id. */
  int RPAREN = 6;
  /** RegularExpression Id. */
  int LBRACE = 7;
  /** RegularExpression Id. */
  int RBRACE = 8;
  /** RegularExpression Id. */
  int LBRACK = 9;
  /** RegularExpression Id. */
  int RBRACK = 10;
  /** RegularExpression Id. */
  int SEMICOLON = 11;
  /** RegularExpression Id. */
  int COMMA = 12;
  /** RegularExpression Id. */
  int DOT = 13;
  /** RegularExpression Id. */
  int EQ = 14;
  /** RegularExpression Id. */
  int NE = 15;
  /** RegularExpression Id. */
  int GT = 16;
  /** RegularExpression Id. */
  int LT = 17;
  /** RegularExpression Id. */
  int LE = 18;
  /** RegularExpression Id. */
  int GE = 19;
  /** RegularExpression Id. */
  int NOT = 20;
  /** RegularExpression Id. */
  int OR = 21;
  /** RegularExpression Id. */
  int AND = 22;
  /** RegularExpression Id. */
  int PLUS = 23;
  /** RegularExpression Id. */
  int MINUS = 24;
  /** RegularExpression Id. */
  int STAR = 25;
  /** RegularExpression Id. */
  int QUESTION = 26;
  /** RegularExpression Id. */
  int SLASH = 27;
  /** RegularExpression Id. */
  int PIPE = 28;
  /** RegularExpression Id. */
  int INVERSE = 29;
  /** RegularExpression Id. */
  int DT_PREFIX = 30;
  /** RegularExpression Id. */
  int NIL = 31;
  /** RegularExpression Id. */
  int ANON = 32;
  /** RegularExpression Id. */
  int IS_A = 33;
  /** RegularExpression Id. */
  int BASE = 34;
  /** RegularExpression Id. */
  int PREFIX = 35;
  /** RegularExpression Id. */
  int SELECT = 36;
  /** RegularExpression Id. */
  int CONSTRUCT = 37;
  /** RegularExpression Id. */
  int DESCRIBE = 38;
  /** RegularExpression Id. */
  int ASK = 39;
  /** RegularExpression Id. */
  int DISTINCT = 40;
  /** RegularExpression Id. */
  int REDUCED = 41;
  /** RegularExpression Id. */
  int AS = 42;
  /** RegularExpression Id. */
  int FROM = 43;
  /** RegularExpression Id. */
  int NAMED = 44;
  /** RegularExpression Id. */
  int WHERE = 45;
  /** RegularExpression Id. */
  int ORDER = 46;
  /** RegularExpression Id. */
  int GROUP = 47;
  /** RegularExpression Id. */
  int BY = 48;
  /** RegularExpression Id. */
  int ASC = 49;
  /** RegularExpression Id. */
  int DESC = 50;
  /** RegularExpression Id. */
  int LIMIT = 51;
  /** RegularExpression Id. */
  int OFFSET = 52;
  /** RegularExpression Id. */
  int OPTIONAL = 53;
  /** RegularExpression Id. */
  int GRAPH = 54;
  /** RegularExpression Id. */
  int UNION = 55;
  /** RegularExpression Id. */
  int MINUS_SETOPER = 56;
  /** RegularExpression Id. */
  int FILTER = 57;
  /** RegularExpression Id. */
  int HAVING = 58;
  /** RegularExpression Id. */
  int EXISTS = 59;
  /** RegularExpression Id. */
  int NOT_EXISTS = 60;
  /** RegularExpression Id. */
  int STR = 61;
  /** RegularExpression Id. */
  int LANG = 62;
  /** RegularExpression Id. */
  int LANGMATCHES = 63;
  /** RegularExpression Id. */
  int DATATYPE = 64;
  /** RegularExpression Id. */
  int BOUND = 65;
  /** RegularExpression Id. */
  int SAMETERM = 66;
  /** RegularExpression Id. */
  int IS_IRI = 67;
  /** RegularExpression Id. */
  int IS_BLANK = 68;
  /** RegularExpression Id. */
  int IS_LITERAL = 69;
  /** RegularExpression Id. */
  int IS_NUMERIC = 70;
  /** RegularExpression Id. */
  int COALESCE = 71;
  /** RegularExpression Id. */
  int BNODE = 72;
  /** RegularExpression Id. */
  int STRDT = 73;
  /** RegularExpression Id. */
  int STRLANG = 74;
  /** RegularExpression Id. */
  int UUID = 75;
  /** RegularExpression Id. */
  int STRUUID = 76;
  /** RegularExpression Id. */
  int IRI = 77;
  /** RegularExpression Id. */
  int IF = 78;
  /** RegularExpression Id. */
  int IN = 79;
  /** RegularExpression Id. */
  int NOT_IN = 80;
  /** RegularExpression Id. */
  int COUNT = 81;
  /** RegularExpression Id. */
  int SUM = 82;
  /** RegularExpression Id. */
  int MIN = 83;
  /** RegularExpression Id. */
  int MAX = 84;
  /** RegularExpression Id. */
  int AVG = 85;
  /** RegularExpression Id. */
  int SAMPLE = 86;
  /** RegularExpression Id. */
  int GROUP_CONCAT = 87;
  /** RegularExpression Id. */
  int SEPARATOR = 88;
  /** RegularExpression Id. */
  int REGEX = 89;
  /** RegularExpression Id. */
  int TRUE = 90;
  /** RegularExpression Id. */
  int FALSE = 91;
  /** RegularExpression Id. */
  int BIND = 92;
  /** RegularExpression Id. */
  int SERVICE = 93;
  /** RegularExpression Id. */
  int BINDINGS = 94;
  /** RegularExpression Id. */
  int VALUES = 95;
  /** RegularExpression Id. */
  int UNDEF = 96;
  /** RegularExpression Id. */
  int STRLEN = 97;
  /** RegularExpression Id. */
  int SUBSTR = 98;
  /** RegularExpression Id. */
  int STR_STARTS = 99;
  /** RegularExpression Id. */
  int STR_ENDS = 100;
  /** RegularExpression Id. */
  int STR_BEFORE = 101;
  /** RegularExpression Id. */
  int STR_AFTER = 102;
  /** RegularExpression Id. */
  int REPLACE = 103;
  /** RegularExpression Id. */
  int UCASE = 104;
  /** RegularExpression Id. */
  int LCASE = 105;
  /** RegularExpression Id. */
  int CONCAT = 106;
  /** RegularExpression Id. */
  int CONTAINS = 107;
  /** RegularExpression Id. */
  int ENCODE_FOR_URI = 108;
  /** RegularExpression Id. */
  int RAND = 109;
  /** RegularExpression Id. */
  int ABS = 110;
  /** RegularExpression Id. */
  int CEIL = 111;
  /** RegularExpression Id. */
  int FLOOR = 112;
  /** RegularExpression Id. */
  int ROUND = 113;
  /** RegularExpression Id. */
  int NOW = 114;
  /** RegularExpression Id. */
  int YEAR = 115;
  /** RegularExpression Id. */
  int MONTH = 116;
  /** RegularExpression Id. */
  int DAY = 117;
  /** RegularExpression Id. */
  int HOURS = 118;
  /** RegularExpression Id. */
  int MINUTES = 119;
  /** RegularExpression Id. */
  int SECONDS = 120;
  /** RegularExpression Id. */
  int TIMEZONE = 121;
  /** RegularExpression Id. */
  int TZ = 122;
  /** RegularExpression Id. */
  int MD5 = 123;
  /** RegularExpression Id. */
  int SHA1 = 124;
  /** RegularExpression Id. */
  int SHA224 = 125;
  /** RegularExpression Id. */
  int SHA256 = 126;
  /** RegularExpression Id. */
  int SHA384 = 127;
  /** RegularExpression Id. */
  int SHA512 = 128;
  /** RegularExpression Id. */
  int INCLUDE = 129;
  /** RegularExpression Id. */
  int LET = 130;
  /** RegularExpression Id. */
  int ASSIGN = 131;
  /** RegularExpression Id. */
  int VAR3 = 132;
  /** RegularExpression Id. */
  int VIRTUAL_GRAPH = 133;
  /** RegularExpression Id. */
  int GRAPHS = 134;
  /** RegularExpression Id. */
  int SOLUTIONS = 135;
  /** RegularExpression Id. */
  int TREF_OPEN = 136;
  /** RegularExpression Id. */
  int TREF_CLOSE = 137;
  /** RegularExpression Id. */
  int VERIFY_DATA = 138;
  /** RegularExpression Id. */
  int PRESERVE_BNODE_IDS = 139;
  /** RegularExpression Id. */
  int STOP_AT_FIRST_ERROR = 140;
  /** RegularExpression Id. */
  int DATATYPE_HANDLING = 141;
  /** RegularExpression Id. */
  int VERIFY = 142;
  /** RegularExpression Id. */
  int IGNORE = 143;
  /** RegularExpression Id. */
  int NORMALIZE = 144;
  /** RegularExpression Id. */
  int DROP_ENTAILMENTS = 145;
  /** RegularExpression Id. */
  int CREATE_ENTAILMENTS = 146;
  /** RegularExpression Id. */
  int ENABLE_ENTAILMENTS = 147;
  /** RegularExpression Id. */
  int DISABLE_ENTAILMENTS = 148;
  /** RegularExpression Id. */
  int LOAD = 149;
  /** RegularExpression Id. */
  int CLEAR = 150;
  /** RegularExpression Id. */
  int DROP = 151;
  /** RegularExpression Id. */
  int ADD = 152;
  /** RegularExpression Id. */
  int MOVE = 153;
  /** RegularExpression Id. */
  int COPY = 154;
  /** RegularExpression Id. */
  int CREATE = 155;
  /** RegularExpression Id. */
  int INSERT = 156;
  /** RegularExpression Id. */
  int DATA = 157;
  /** RegularExpression Id. */
  int DELETE = 158;
  /** RegularExpression Id. */
  int WITH = 159;
  /** RegularExpression Id. */
  int SILENT = 160;
  /** RegularExpression Id. */
  int DEFAULT_GRAPH = 161;
  /** RegularExpression Id. */
  int ALL = 162;
  /** RegularExpression Id. */
  int INTO = 163;
  /** RegularExpression Id. */
  int TO = 164;
  /** RegularExpression Id. */
  int USING = 165;
  /** RegularExpression Id. */
  int Q_IRI_REF = 166;
  /** RegularExpression Id. */
  int PNAME_NS = 167;
  /** RegularExpression Id. */
  int PNAME_LN = 168;
  /** RegularExpression Id. */
  int BLANK_NODE_LABEL = 169;
  /** RegularExpression Id. */
  int VAR1 = 170;
  /** RegularExpression Id. */
  int VAR2 = 171;
  /** RegularExpression Id. */
  int LANGTAG = 172;
  /** RegularExpression Id. */
  int INTEGER = 173;
  /** RegularExpression Id. */
  int INTEGER_POSITIVE = 174;
  /** RegularExpression Id. */
  int INTEGER_NEGATIVE = 175;
  /** RegularExpression Id. */
  int DECIMAL = 176;
  /** RegularExpression Id. */
  int DECIMAL1 = 177;
  /** RegularExpression Id. */
  int DECIMAL2 = 178;
  /** RegularExpression Id. */
  int DECIMAL_POSITIVE = 179;
  /** RegularExpression Id. */
  int DECIMAL_NEGATIVE = 180;
  /** RegularExpression Id. */
  int DOUBLE = 181;
  /** RegularExpression Id. */
  int DOUBLE1 = 182;
  /** RegularExpression Id. */
  int DOUBLE2 = 183;
  /** RegularExpression Id. */
  int DOUBLE3 = 184;
  /** RegularExpression Id. */
  int EXPONENT = 185;
  /** RegularExpression Id. */
  int DOUBLE_POSITIVE = 186;
  /** RegularExpression Id. */
  int DOUBLE_NEGATIVE = 187;
  /** RegularExpression Id. */
  int STRING_LITERAL1 = 188;
  /** RegularExpression Id. */
  int STRING_LITERAL2 = 189;
  /** RegularExpression Id. */
  int STRING_LITERAL_LONG1 = 190;
  /** RegularExpression Id. */
  int STRING_LITERAL_LONG2 = 191;
  /** RegularExpression Id. */
  int SAFE_CHAR1 = 192;
  /** RegularExpression Id. */
  int SAFE_CHAR2 = 193;
  /** RegularExpression Id. */
  int SAFE_CHAR_LONG1 = 194;
  /** RegularExpression Id. */
  int SAFE_CHAR_LONG2 = 195;
  /** RegularExpression Id. */
  int ECHAR = 196;
  /** RegularExpression Id. */
  int HEX = 197;
  /** RegularExpression Id. */
  int ALPHA = 198;
  /** RegularExpression Id. */
  int NUM = 199;
  /** RegularExpression Id. */
  int PN_CHARS_BASE = 200;
  /** RegularExpression Id. */
  int PN_CHARS_U = 201;
  /** RegularExpression Id. */
  int VAR_CHAR = 202;
  /** RegularExpression Id. */
  int PN_CHARS = 203;
  /** RegularExpression Id. */
  int PN_PREFIX = 204;
  /** RegularExpression Id. */
  int PN_LOCAL = 205;
  /** RegularExpression Id. */
  int PLX = 206;
  /** RegularExpression Id. */
  int PERCENT = 207;
  /** RegularExpression Id. */
  int PN_LOCAL_ESC = 208;
  /** RegularExpression Id. */
  int VARNAME = 209;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WS_CHAR>",
    "<WHITESPACE>",
    "<SINGLE_LINE_COMMENT>",
    "\"\\n\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\"!=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"!\"",
    "\"||\"",
    "\"&&\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"?\"",
    "\"/\"",
    "\"|\"",
    "\"^\"",
    "\"^^\"",
    "<NIL>",
    "<ANON>",
    "\"a\"",
    "\"base\"",
    "\"prefix\"",
    "\"select\"",
    "\"construct\"",
    "\"describe\"",
    "\"ask\"",
    "\"distinct\"",
    "\"reduced\"",
    "\"as\"",
    "\"from\"",
    "\"named\"",
    "\"where\"",
    "\"order\"",
    "\"group\"",
    "\"by\"",
    "\"asc\"",
    "\"desc\"",
    "\"limit\"",
    "\"offset\"",
    "\"optional\"",
    "\"graph\"",
    "\"union\"",
    "\"minus\"",
    "\"filter\"",
    "\"having\"",
    "\"exists\"",
    "\"not exists\"",
    "\"str\"",
    "\"lang\"",
    "\"langmatches\"",
    "\"datatype\"",
    "\"bound\"",
    "\"sameTerm\"",
    "<IS_IRI>",
    "\"isBlank\"",
    "\"isLiteral\"",
    "\"isNumeric\"",
    "\"coalesce\"",
    "\"bnode\"",
    "\"strdt\"",
    "\"strlang\"",
    "\"uuid\"",
    "\"struuid\"",
    "<IRI>",
    "\"if\"",
    "\"in\"",
    "\"not in\"",
    "\"count\"",
    "\"sum\"",
    "\"min\"",
    "\"max\"",
    "\"avg\"",
    "\"sample\"",
    "\"group_concat\"",
    "\"separator\"",
    "\"regex\"",
    "\"true\"",
    "\"false\"",
    "\"bind\"",
    "\"service\"",
    "\"bindings\"",
    "\"values\"",
    "\"UNDEF\"",
    "\"strlen\"",
    "\"substr\"",
    "\"strStarts\"",
    "\"strEnds\"",
    "\"strBefore\"",
    "\"strAfter\"",
    "\"replace\"",
    "\"ucase\"",
    "\"lcase\"",
    "\"concat\"",
    "\"contains\"",
    "\"encode_for_URI\"",
    "\"rand\"",
    "\"abs\"",
    "\"ceil\"",
    "\"floor\"",
    "\"round\"",
    "\"now\"",
    "\"year\"",
    "\"month\"",
    "\"day\"",
    "\"hours\"",
    "\"minutes\"",
    "\"seconds\"",
    "\"timezone\"",
    "\"tz\"",
    "\"md5\"",
    "\"sha1\"",
    "\"sha224\"",
    "\"sha256\"",
    "\"sha384\"",
    "\"sha512\"",
    "\"include\"",
    "\"let\"",
    "\":=\"",
    "<VAR3>",
    "\"virtual graph\"",
    "\"graphs\"",
    "\"solutions\"",
    "\"<<\"",
    "\">>\"",
    "\"verifyData\"",
    "\"preserveBNodeIDs\"",
    "\"stopAtFirstError\"",
    "\"datatypeHandling\"",
    "\"VERIFY\"",
    "\"IGNORE\"",
    "\"NORMALIZE\"",
    "\"drop entailments\"",
    "\"create entailments\"",
    "\"enable entailments\"",
    "\"disable entailments\"",
    "\"load\"",
    "\"clear\"",
    "\"drop\"",
    "\"add\"",
    "\"move\"",
    "\"copy\"",
    "\"create\"",
    "\"insert\"",
    "\"data\"",
    "\"delete\"",
    "\"with\"",
    "\"silent\"",
    "\"default\"",
    "\"all\"",
    "\"into\"",
    "\"to\"",
    "\"using\"",
    "<Q_IRI_REF>",
    "<PNAME_NS>",
    "<PNAME_LN>",
    "<BLANK_NODE_LABEL>",
    "<VAR1>",
    "<VAR2>",
    "<LANGTAG>",
    "<INTEGER>",
    "<INTEGER_POSITIVE>",
    "<INTEGER_NEGATIVE>",
    "<DECIMAL>",
    "<DECIMAL1>",
    "<DECIMAL2>",
    "<DECIMAL_POSITIVE>",
    "<DECIMAL_NEGATIVE>",
    "<DOUBLE>",
    "<DOUBLE1>",
    "<DOUBLE2>",
    "<DOUBLE3>",
    "<EXPONENT>",
    "<DOUBLE_POSITIVE>",
    "<DOUBLE_NEGATIVE>",
    "<STRING_LITERAL1>",
    "<STRING_LITERAL2>",
    "<STRING_LITERAL_LONG1>",
    "<STRING_LITERAL_LONG2>",
    "<SAFE_CHAR1>",
    "<SAFE_CHAR2>",
    "<SAFE_CHAR_LONG1>",
    "<SAFE_CHAR_LONG2>",
    "<ECHAR>",
    "<HEX>",
    "<ALPHA>",
    "<NUM>",
    "<PN_CHARS_BASE>",
    "<PN_CHARS_U>",
    "<VAR_CHAR>",
    "<PN_CHARS>",
    "<PN_PREFIX>",
    "<PN_LOCAL>",
    "<PLX>",
    "<PERCENT>",
    "<PN_LOCAL_ESC>",
    "<VARNAME>",
  };

}
